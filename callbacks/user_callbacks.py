from aiogram import types, Dispatcher
from main import bot, dp
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from keyboards.user_keyboards import *
from data.config import managers, logs
from functions.cosmyapi import *
from database.admin_db import get_manager_name
from states.user_states import SupportStates, ReviewStates, ReviewOrderStates
from aiogram.dispatcher import FSMContext
from database.user_db import get_manager_id_from_db, add_question_to_db, check_if_question_exists,  get_user_phone
from states.user_states import SupportStates
from keyboards.admin_keyboards import get_reply_keyboard, get_start_dialog_keyboard
import asyncio, pytz
from datetime import datetime

# Define working hours
WORKING_HOURS = {
    "Monday": (9, 20),
    "Tuesday": (9, 20),
    "Wednesday": (9, 20),
    "Thursday": (9, 20),
    "Friday": (10, 20),
    "Saturday": (10, 18)
}

def is_within_working_hours():
    kyiv_tz = pytz.timezone('Europe/Kyiv')
    now = datetime.now(kyiv_tz)
    current_day = now.strftime('%A')
    current_hour = now.hour

    if current_day in WORKING_HOURS:
        start_hour, end_hour = WORKING_HOURS[current_day]
        return start_hour <= current_hour < end_hour
    return False


@dp.callback_query_handler(lambda c: c.data == 'centre')
async def send_contacts_info(callback_query: types.CallbackQuery):
    new_caption = "–û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å üëáüèª"
    keyboard = get_contacts_keyboard()
    
    await callback_query.message.edit_caption(
        caption=new_caption,
        reply_markup=keyboard
    )
    
@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def go_to_main_menu(callback_query: types.CallbackQuery):
    keyboard = get_start_keyboard()  
    await callback_query.message.edit_caption(
        caption="–í—ñ—Ç–∞—é! –ù–∞ –∑–≤‚Äô—è–∑–∫—É Cosmy –∞—Å–∏—Å—Ç–µ–Ω—Ç üë±üèª‚Äç‚ôÄÔ∏è\n –ß–∏–º –º–æ–∂—É –±—É—Ç–∏ —Ç–æ–±—ñ –∫–æ—Ä–∏—Å–Ω–æ—é?",
        reply_markup=keyboard
    )
    

@dp.callback_query_handler(lambda c: c.data == 'contacts')
async def send_contacts_info(callback_query: types.CallbackQuery):
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
    contact_info = (
        "–ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏:\n"
        "üìç –º. –ö–∏—ó–≤\n"
        "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∏–π –ø—Ä–æ–≤—É–ª–æ–∫ 7, –æ—Ñ—ñ—Å 14\n\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω:\n"
        "066 288 48 11\n"
        "073 317 54 43\n"
        "067 820 58 48\n\n"
        "üìß –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞:\n"
        "<a href='mailto:cosmy.ua@gmail.com'>cosmy.ua@gmail.com</a>\n\n"
        "üïí –ß–∞—Å —Ä–æ–±–æ—Ç–∏:\n"
        "–ü–Ω-–ü—Ç 9:00-20:00\n"
        "–°–±-–ù–¥ 10:00-20:00\n"
    )
    
    keyboard = get_contacts_contacts_keyboard()
    await callback_query.message.edit_caption(
        caption=contact_info,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
        
@dp.callback_query_handler(lambda c: c.data == 'info')
async def send_info_menu(callback_query: types.CallbackQuery):
    info_message = "–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?"

    keyboard = get_info_keyboard()
    await callback_query.message.edit_caption(
        caption=info_message,
        reply_markup=keyboard
    )
    
    
@dp.callback_query_handler(lambda c: c.data == 'settings')
async def settings(callback_query: types.CallbackQuery):
    new_caption = "üîÑ –ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É?"
    keyboard = get_settings_keyboard()
    
    await callback_query.message.edit_caption(
        caption=new_caption,
        reply_markup=keyboard
    )
    
@dp.callback_query_handler(lambda c: c.data == 'change_number')
async def process_change_number(callback_query: types.CallbackQuery):
    share_contact_button = KeyboardButton("üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
    share_contact_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(share_contact_button)
    user_id = callback_query.from_user.id    
    await bot.answer_callback_query(callback_query.id) 
    await bot.send_message(user_id, "<b>–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.</b>", parse_mode="html", reply_markup=share_contact_keyboard)
    
    
async def send_order_data_to_user(callback_query: types.CallbackQuery, order_details):
    if order_details:
        response_message = "\n".join([f"{key}: {value}" for key, value in order_details.items() if key != "–¢–æ–≤–∞—Ä–∏ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ"])
        products_message = "–¢–æ–≤–∞—Ä–∏ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ:\n" + "\n".join(order_details["–¢–æ–≤–∞—Ä–∏ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ"])
        full_message = f"{response_message}\n\n{products_message}"

        keyboard = main_menu()

        await callback_query.message.edit_caption(
            caption=full_message,
            parse_mode="HTML",
            reply_markup=keyboard
        )

@dp.callback_query_handler(lambda c: c.data == 'my_order')
async def order_history_handler(callback_query: types.CallbackQuery):
    api_token = login()
    if not api_token:
        await callback_query.message.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—ñ–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    user_id = callback_query.from_user.id
    telephone = get_user_phone(user_id)
    print(telephone)

    if not telephone:
        await callback_query.message.answer("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")
        return

    order_data = get_last_order_by_telephone(api_token, telephone)
    keyboard = our_site_menu()

    if order_data is None or (isinstance(order_data, dict) and 'order' not in order_data):
        await callback_query.message.edit_caption(
            caption="<b>–£ –≤–∞—Å —â–µ –Ω–µ –±—É–ª–æ –∑–∞–º–æ–≤–ª–µ–Ω—å, –∞–ª–µ —Ü–µ –ª–µ–≥–∫–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ üòâ</b>",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        return

    order = order_data.get('order')
    if order:
        order_details = format_order_data(order_data)

        # Access the order directly without using a list
        order = order_data['order']

        # Extract order_id directly
        order_id = order['order_id']

        # Format the date as required
        order_date = order['date_added'].split(" ")[0]  # Get the date part
        order_time = order['date_added'].split(" ")[1][:5]  # Get the time part without seconds
        formatted_date = f"{order_date[8:10]}.{order_date[5:7]}.{order_date[0:4][2:]}"  # Format to DD.MM.YY
        total_amount = float(order['total'])  # Convert to float for formatting
        formatted_total = f"{total_amount:.2f}".rstrip('0').rstrip('.')  # Format and remove trailing zeros
        # Prepare the message with order details
        order_message = (
            f"<b>‚Ññ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {order_id}\n\n"  # Use the extracted order_id directly
            f"<b>–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {formatted_total} –≥—Ä–Ω\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {order['order_status'] if order['order_status'] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"<b>–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {order_time} ({formatted_date})\n\n"
            f"<b>–°–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order['shipping_method']}\n\n"
            f"<b>–ú—ñ—Å—Ç–æ:</b> {order['payment_city']}\n\n"
            f"<b>–ê–¥—Ä–µ—Å–∞:</b> {order['payment_address_1']}\n\n"
            f"<b>–¢–æ–≤–∞—Ä–∏ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ:</b>\n\n"
        )

        for product in order['order_products']:
            product_info = product['product_info']
            order_message += (
                f"- {product_info['name']} - {product_info['quantity']}—à—Ç {product_info['price']}–≥—Ä–Ω\n\n"
                f"<b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä:</b> {product_info['url']}\n\n"
            )

        order_message += "\n" + "=" * 20 + "\n"
        
        print(order_message)
        keyboard2 = main_menu()
        await callback_query.message.edit_caption(
            caption=order_message,
            parse_mode="HTML",
            reply_markup=keyboard2
        )
        
        # await send_order_data_to_user(callback_query, order_details)
    else:
        await callback_query.message.edit_caption(
            caption="<b>–£ –≤–∞—Å —â–µ –Ω–µ –±—É–ª–æ –∑–∞–º–æ–≤–ª–µ–Ω—å, –∞–ª–µ —Ü–µ –ª–µ–≥–∫–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ üòâ</b>",
            parse_mode="HTML",
            reply_markup=keyboard
        )


user_orders_data = {}

@dp.callback_query_handler(lambda c: c.data == 'my_order_history')
async def order_history_handler(callback_query: types.CallbackQuery):
    api_token = login()
    if not api_token:
        await callback_query.message.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—ñ–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    user_id = callback_query.from_user.id
    telephone = get_user_phone(user_id)

    if not telephone:
        await callback_query.message.answer("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")
        return

    orders_data = get_all_last_orders_by_telephone(api_token, telephone)
    print(orders_data)
    keyboard = our_site_menu()

    if 'error' in orders_data:
        await callback_query.message.edit_caption(
            caption="<b>–£ –≤–∞—Å —â–µ –Ω–µ –±—É–ª–æ –∑–∞–º–æ–≤–ª–µ–Ω—å, –∞–ª–µ —Ü–µ –ª–µ–≥–∫–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ üòâ</b>",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        return

    # Store the orders data in the user's state
    user_orders_data[user_id] = {'orders_data': orders_data, 'keyboard': keyboard}

    # Initialize the order index and send the first order
    await show_order(callback_query, orders_data, 0, keyboard)

async def show_order(callback_query, orders_data, index, keyboard):
    # Total number of orders
    total_orders = len(orders_data['orders'])

    # Get the current order based on the index
    order_id = list(orders_data['orders'].keys())[index]
    order = orders_data['orders'][order_id]

    # Format the date as required
    order_date = order['date_added'].split(" ")[0]  # Get the date part
    order_time = order['date_added'].split(" ")[1][:5]  # Get the time part without seconds
    formatted_date = f"{order_date[8:10]}.{order_date[5:7]}.{order_date[0:4][2:]}"  # Format to DD.MM.YY
    total_amount = float(order['total'])  # Convert to float for formatting
    formatted_total = f"{total_amount:.2f}".rstrip('0').rstrip('.')  # Format and remove trailing zeros
    # Prepare the message with order details
    order_message = (
        f"<b>‚Ññ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {order['order_id']}\n\n"
        f"<b>–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {formatted_total} –≥—Ä–Ω\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {order['order_status'] if order['order_status'] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n\n"
        f"<b>–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {order_time} ({formatted_date})\n\n"
        f"<b>–°–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order['shipping_method']}\n\n"
        f"<b>–ú—ñ—Å—Ç–æ:</b> {order['payment_city']}\n\n"
        f"<b>–ê–¥—Ä–µ—Å–∞:</b> {order['payment_address_1']}\n\n"
        f"<b>–¢–æ–≤–∞—Ä–∏ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ:</b>\n\n"
    )

    for product in order['order_products']:
        product_info = product['product_info']
        order_message += (
            f"- {product_info['name']} - {product_info['quantity']}—à—Ç {product_info['price']}–≥—Ä–Ω\n\n"
            f"<b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä:</b> {product_info['url']}\n\n"
        )

    order_message += "\n" + "=" * 20 + "\n"

    # Create navigation buttons
    navigation_buttons = [
        types.InlineKeyboardButton("‚Üê", callback_data=f"prev_order:{index}"),
        types.InlineKeyboardButton("‚Üí", callback_data=f"next_order:{index}"),
        types.InlineKeyboardButton(text="üÖº –ú–µ–Ω—é", callback_data="main_menu")
    ]

    keyboard_navigation = types.InlineKeyboardMarkup(row_width=2)
    keyboard_navigation.add(*navigation_buttons)

    # Use edit_message_caption to update the caption of the original message
    await callback_query.message.edit_caption(order_message, parse_mode="HTML", reply_markup=keyboard_navigation)


@dp.callback_query_handler(lambda c: c.data.startswith('prev_order:') or c.data.startswith('next_order:'))
async def navigate_orders(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # Retrieve the stored orders data and keyboard for the user
    if user_id not in user_orders_data:
        await callback_query.answer("–î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    orders_data = user_orders_data[user_id]['orders_data']
    keyboard = user_orders_data[user_id]['keyboard']

    # Extract the action and current index
    action, index = callback_query.data.split(':')
    index = int(index)

    # Determine the new index based on the action
    if action == 'prev_order' and index > 0:
        index -= 1
    elif action == 'next_order' and index < len(orders_data['orders']) - 1:
        index += 1

    # Re-display the order for the new index
    await show_order(callback_query, orders_data, index, keyboard)



@dp.callback_query_handler(lambda c: c.data == "send_menu")
async def go_to_main_menu(callback_query: types.CallbackQuery):
    keyboard = get_start_keyboard()
    photo_path = 'data/hello.jpg'

    await callback_query.message.answer_photo(
        photo=types.InputFile(photo_path),
        caption="–í—ñ—Ç–∞—é! –ù–∞ –∑–≤‚Äô—è–∑–∫—É Cosmy –∞—Å–∏—Å—Ç–µ–Ω—Ç üë±üèª‚Äç‚ôÄÔ∏è\n –ß–∏–º –º–æ–∂—É –±—É—Ç–∏ —Ç–æ–±—ñ –∫–æ—Ä–∏—Å–Ω–æ—é?",
        reply_markup=keyboard
    )




@dp.callback_query_handler(lambda c: c.data == 'send_review')
async def start_review_process(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("–ë—É–¥—å –ª–∞—Å–∫–∞ –æ—Ü—ñ–Ω—ñ—Ç—å —è–∫—ñ—Å—Ç—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥ 1 –¥–æ 5ü§ç.", reply_markup=get_rating_keyboard())


@dp.callback_query_handler(lambda c: c.data == 'cancelreview')
async def start_review_process(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("–î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π, –¥—è–∫—É—é —â–æ –∑–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É. –ë–∞–∂–∞—î—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫?", reply_markup=send_review_menu())
    
@dp.callback_query_handler(lambda c: c.data.startswith('rate_'), state='*')
async def process_rating(callback_query: types.CallbackQuery, state: FSMContext):
    rating = int(callback_query.data.split('_')[1])
    await state.update_data(rating=rating)
    await ReviewStates.text.set()
    await callback_query.message.edit_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –≤—ñ–¥–≥—É–∫—É:", reply_markup=send_review())
    
    
@dp.callback_query_handler(lambda c: c.data.startswith('sendreview'), state=ReviewStates.text)
async def process_rating(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_name = get_manager_name(user_id)
    user_data = await state.get_data()
    rating = user_data.get('rating')
    await bot.send_message(logs, f"<b>–í—ñ–¥–≥—É–∫ –∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b> @{user_name}, ID:{user_id}\n\n <b>–û—Ü—ñ–Ω–∫–∞:</b> {rating}", parse_mode='HTML' )
    await bot.send_message(user_id, f"–î—è–∫—É—î–º–æ –∑–∞ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤‚Äô—è–∑–æ–∫. –ú–∏ —Ü—ñ–Ω—É—î–º–æ –≤–∞—à—É –¥—É–º–∫—É üíö", reply_markup=send_menu())
    await state.finish()
    
    # await asyncio.sleep(2)
    # keyboard = get_start_keyboard()
    # photo_path = 'data/hello.jpg'

    # await callback_query.message.answer_photo(
    #     photo=types.InputFile(photo_path),
    #     caption="–í—ñ—Ç–∞—é! –ù–∞ –∑–≤‚Äô—è–∑–∫—É Cosmy –∞—Å–∏—Å—Ç–µ–Ω—Ç üë±üèª‚Äç‚ôÄÔ∏è\n –ß–∏–º –º–æ–∂—É –±—É—Ç–∏ —Ç–æ–±—ñ –∫–æ—Ä–∏—Å–Ω–æ—é?",
    #     reply_markup=keyboard
    # )

@dp.message_handler(state=ReviewStates.text)
async def process_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = get_manager_name(user_id)
    user_data = await state.get_data()
    rating = user_data.get('rating')
    text = message.text
    await bot.send_message(logs, f"<b>–í—ñ–¥–≥—É–∫ –∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b> @{user_name}, ID:{user_id}\n\n <b>–û—Ü—ñ–Ω–∫–∞:</b> {rating}\n <b>–¢–µ–∫—Å—Ç:</b> {text}", parse_mode='HTML')
    await bot.send_message(message.chat.id, f"–î—è–∫—É—î–º–æ –∑–∞ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤‚Äô—è–∑–æ–∫. –ú–∏ —Ü—ñ–Ω—É—î–º–æ –≤–∞—à—É –¥—É–º–∫—É üíö", reply_markup=send_menu())
    await state.finish()
    
    
    
    
    
    
    


@dp.callback_query_handler(lambda c: c.data == 'send_orderreview')
async def start_review_process(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("–ë—É–¥—å –ª–∞—Å–∫–∞ –æ—Ü—ñ–Ω—ñ—Ç—å —è–∫—ñ—Å—Ç—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥ 1 –¥–æ 5ü§ç.", reply_markup=get_order_rating_keyboard())


@dp.callback_query_handler(lambda c: c.data == 'cancelreview')
async def start_review_process(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("–î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π, –¥—è–∫—É—é —â–æ –∑–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É. –ë–∞–∂–∞—î—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫?", reply_markup=send_review_menu())
    
@dp.callback_query_handler(lambda c: c.data.startswith('orderrate_'), state='*')
async def process_rating(callback_query: types.CallbackQuery, state: FSMContext):
    rating = int(callback_query.data.split('_')[1])
    await state.update_data(rating=rating)
    await ReviewOrderStates.text.set()
    await callback_query.message.edit_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –≤—ñ–¥–≥—É–∫—É:", reply_markup=send_order_review())
    
    
@dp.callback_query_handler(lambda c: c.data.startswith('ordersendreview'), state=ReviewOrderStates.text)
async def process_rating(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_name = get_manager_name(user_id)
    user_data = await state.get_data()
    rating = user_data.get('rating')
    await bot.send_message(logs, f"<b>–í—ñ–¥–≥—É–∫ –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b> @{user_name}, ID:{user_id}\n\n <b>–û—Ü—ñ–Ω–∫–∞:</b> {rating}", parse_mode='HTML' )
    await bot.send_message(user_id, f"–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫! –í–∞—à–∞ –¥—É–º–∫–∞ –≤–∞–∂–ª–∏–≤–∞ –¥–ª—è –Ω–∞—Å.ü§ç", reply_markup=send_menu())
    await state.finish()
    
    # await asyncio.sleep(2)
    # keyboard = get_start_keyboard()
    # photo_path = 'data/hello.jpg'

    # await callback_query.message.answer_photo(
    #     photo=types.InputFile(photo_path),
    #     caption="–í—ñ—Ç–∞—é! –ù–∞ –∑–≤‚Äô—è–∑–∫—É Cosmy –∞—Å–∏—Å—Ç–µ–Ω—Ç üë±üèª‚Äç‚ôÄÔ∏è\n –ß–∏–º –º–æ–∂—É –±—É—Ç–∏ —Ç–æ–±—ñ –∫–æ—Ä–∏—Å–Ω–æ—é?",
    #     reply_markup=keyboard
    # )

@dp.message_handler(state=ReviewOrderStates.text)
async def process_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = get_manager_name(user_id)
    user_data = await state.get_data()
    rating = user_data.get('rating')
    text = message.text
    await bot.send_message(logs, f"<b>–í—ñ–¥–≥—É–∫ –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b> @{user_name}, ID:{user_id}\n\n <b>–û—Ü—ñ–Ω–∫–∞:</b> {rating}\n <b>–¢–µ–∫—Å—Ç:</b> {text}", parse_mode='HTML')
    await bot.send_message(message.chat.id, f"–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫, –≤–∞—à–∞ –¥—É–º–∫–∞ –¥—É–∂–∫–∞ –≤–∞–∂–ª–∏–≤–∞ ü©∂", reply_markup=send_menu())
    await state.finish()

###########################################################################################


@dp.callback_query_handler(lambda c: c.data == 'consultation')
async def order_history_handler(callback_query: types.CallbackQuery, state: FSMContext):
    
    
    if is_within_working_hours():
        greeting_message = (
            "–í—ñ—Ç–∞—é! –ó –≤–∞–º–∏ Cosmy –∞—Å–∏—Å—Ç–µ–Ω—Ç üë©‚Äçüíº\n –ß–∏ –º–æ–∂—É –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–æ—é? –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –∑ —Ä–∞–¥—ñ—Å—Ç—é –¥–æ–ø–æ–º–æ–∂—É! "
        )
    else:
        greeting_message = (
            "–í—ñ—Ç–∞—î–º–æ! –ù–∞—Ä–∞–∑—ñ –º–∏ –Ω–µ –Ω–∞ –∑–≤‚Äô—è–∑–∫—É, –∞–ª–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –¥–æ–ø–æ–º–æ–∂–µ–º–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ª–∏—à—Ç–µ —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —ñ –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ –≤–∞–º —É –Ω–∞–π–±–ª–∏–∂—á–∏–π —Ä–æ–±–æ—á–∏–π —á–∞—Å üôÇ\n\n"
            "<b>–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏:</b>\n"
            "–ü–Ω - –ü—Ç: 09:00 - 20:00\n"
            "–°–± - –ù–¥: 10:00 - 20:00"
        )
    
    
    await callback_query.message.answer(greeting_message, parse_mode='HTML', reply_markup=get_cancel_menu_keyboard())
    await SupportStates.waiting_for_question.set()


@dp.callback_query_handler(lambda c: c.data == "cancell", state=SupportStates.waiting_for_question)
async def go_to_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = get_start_keyboard()
    photo_path = 'data/hello.jpg'

    await callback_query.message.answer_photo(
        photo=types.InputFile(photo_path),
        caption="–í—ñ—Ç–∞—é! –ù–∞ –∑–≤‚Äô—è–∑–∫—É Cosmy –∞—Å–∏—Å—Ç–µ–Ω—Ç üë±üèª‚Äç‚ôÄÔ∏è\n –ß–∏–º –º–æ–∂—É –±—É—Ç–∏ —Ç–æ–±—ñ –∫–æ—Ä–∏—Å–Ω–æ—é?",
        reply_markup=keyboard
    )
    await state.finish()

@dp.message_handler(state=SupportStates.waiting_for_question, content_types=types.ContentTypes.ANY)
async def receive_question(message: types.Message, state: FSMContext):
    keyboard = send_menu()
    if message.text and message.text.lower() == "–≤—ñ–¥–º—ñ–Ω–∏—Ç–∏":
        await state.finish()
        await message.answer("–©–æ–± –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞—à–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µü§ó.", reply_markup=keyboard)
        return

    user_id = message.from_user.id
    user_name = message.from_user.username or message.from_user.full_name

    if message.text:
        user_question = message.text
    elif message.photo:
        user_question = "–ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–µ —Ñ–æ—Ç–æ"
    elif message.video:
        user_question = "–ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–µ –≤—ñ–¥–µ–æ"
    elif message.document:
        user_question = "–ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç"
    elif message.audio:
        user_question = "–ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–∏–π –∞—É–¥—ñ–æ—Ñ–∞–π–ª"
    elif message.voice:
        user_question = "–ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
    elif message.video_note:
        user_question = "–í—ñ–¥–µ–æ–∑–∞–º–µ—Ç–∫–∞"
    elif message.media_group:
        user_question = "–ú–µ–¥—ñ–∞–≥—Ä—É–ø–∞"
    else:
        user_question = "–ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"



    question_id = add_question_to_db(user_id, user_name, user_question)

    manager_id = get_manager_id_from_db(user_id)


    # Prepare manager message
    for manager_id in managers:
        manager_message = (
            f"–ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{user_name}:\n"
            f"\n<b>{user_question}</b>\n"
        )

        if message.text:
            await bot.send_message(manager_id, manager_message, reply_markup=get_start_dialog_keyboard(question_id))
        elif message.photo:
            await bot.send_photo(manager_id, message.photo[-1].file_id, caption=manager_message, reply_markup=get_start_dialog_keyboard(question_id))
        elif message.video:
            await bot.send_video(manager_id, message.video.file_id, caption=manager_message, reply_markup=get_start_dialog_keyboard(question_id))
        elif message.document:
            await bot.send_document(manager_id, message.document.file_id, caption=manager_message, reply_markup=get_start_dialog_keyboard(question_id))
        elif message.audio:
            await bot.send_audio(manager_id, message.audio.file_id, caption=manager_message, reply_markup=get_start_dialog_keyboard(question_id))
        elif message.voice:
            await bot.send_voice(manager_id, message.voice.file_id, caption=manager_message, reply_markup=get_start_dialog_keyboard(question_id))
        elif message.video_note:
            await bot.send_video_note(manager_id, message.video_note.file_id, reply_markup=get_start_dialog_keyboard(question_id))
            
        await state.finish()

    # Determine response based on working hours
    if is_within_working_hours():
        greeting_message = (
            "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è! –ù–∞—à—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –∑–≤'—è–∂—É—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º. üôå"
        )
    else:
        greeting_message = (
            "<b>–î—è–∫—É—î–º–æ –∑–∞ –í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è ü§ç</b>\n\n"
            "–ù–∞—Ä–∞–∑—ñ –≤ –Ω–∞—Å –Ω–µ—Ä–æ–±–æ—á–∏–π —á–∞—Å —ñ –Ω–∞—à—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –Ω–µ –Ω–∞ –∑–≤‚Äô—è–∑–∫—É.\n"
            "–ú–∏ –ø—Ä–∏–π–Ω—è–ª–∏ –í–∞—à –∑–∞–ø–∏—Ç —ñ –≤—ñ–¥–ø–æ–≤—ñ–º–æ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –≤ —Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏. \n\n"
            "–ë–µ—Ä–µ–∂—ñ—Ç—å —Å–µ–±–µ! üôå"
        )
        
        # Send greeting message
    await asyncio.sleep(1)
    await bot.send_chat_action(message.chat.id, action="typing")
    await asyncio.sleep(2)
    
    photo_path = 'data/hello.jpg'

    await message.answer(
        greeting_message,
        reply_markup=keyboard
    )






            
            
            
@dp.message_handler(state=SupportStates.waiting_for_new_question, content_types=['text', 'photo', 'video', 'document', 'audio', 'voice', 'video_note', 'media_group'])
async def forward_user_message_to_admin(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.username or message.from_user.full_name

    data = await state.get_data()
    question_id = data.get('question_id')
    print(question_id)
    manager_id = get_manager_id_from_db(user_id)
    await state.update_data(manager_id=manager_id)

    reply_keyboard = get_reply_keyboard(question_id)

    if message.text:
        await bot.send_message(manager_id, f"–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{user_name}:\n\n{message.text}", reply_markup=reply_keyboard)
    elif message.photo:
        await bot.send_photo(manager_id, message.photo[-1].file_id, caption=f"–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{user_name}", reply_markup=reply_keyboard)
    elif message.video:
        await bot.send_video(manager_id, message.video.file_id, caption=f"–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{user_name}", reply_markup=reply_keyboard)
    elif message.document:
        await bot.send_document(manager_id, message.document.file_id, caption=f"–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{user_name}", reply_markup=reply_keyboard)
    elif message.audio:
        await bot.send_audio(manager_id, message.audio.file_id, caption=f"–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{user_name}", reply_markup=reply_keyboard)
    elif message.voice:
        await bot.send_voice(manager_id, message.voice.file_id, caption=f"–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{user_name}", reply_markup=reply_keyboard)
    elif message.video_note:
        await bot.send_video_note(manager_id, message.video_note.file_id, reply_markup=reply_keyboard)
    elif message.media_group:
        for media in message.media_group:
            media_type = media['type']
            if media_type == 'photo':
                await bot.send_photo(manager_id, media['file_id'], caption=f"–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{user_name}", reply_markup=reply_keyboard)
            elif media_type == 'video':
                await bot.send_video(manager_id, media['file_id'], caption=f"–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{user_name}", reply_markup=reply_keyboard)
            elif media_type == 'document':
                await bot.send_document(manager_id, media['file_id'], caption=f"–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{user_name}", reply_markup=reply_keyboard)
            elif media_type == 'audio':
                await bot.send_audio(manager_id, media['file_id'], caption=f"–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{user_name}", reply_markup=reply_keyboard)
            elif media_type == 'voice':
                await bot.send_voice(manager_id, media['file_id'], caption=f"–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{user_name}", reply_markup=reply_keyboard)
            elif media_type == 'video_note':
                await bot.send_video_note(manager_id, media['file_id'], reply_markup=reply_keyboard)

    add_question_to_db(user_id, user_name, message.text or 'Media file')

    manager_state = dp.current_state(chat=manager_id, user=manager_id)
    await manager_state.finish()

    
def register_callbacks(dp: Dispatcher):
    dp.register_callback_query_handler(send_contacts_info, lambda c: c.data == 'check')