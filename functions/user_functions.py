import logging
from database.admin_db import get_all_user_phones
from database.user_db import save_order_to_db, get_order_status, get_user_id, fetch_posts_for_mailing
from functions.cosmyapi import *
import asyncio, pytz, datetime
from main import bot, dp
from keyboards.user_keyboards import send_menu, send_review_menu, send_order_review_menu

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


async def order_history():
    logging.info("–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü—ñ—ó order_history")
    
    api_token = login()
    if not api_token:
        logging.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω API")
        return

    user_phones = get_all_user_phones()
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ {len(user_phones)} —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")

    for phone in user_phones:
        phone = str(phone)
        if phone.startswith("38"):
            phone = phone[2:]  

        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone}")
        order_data = get_last_order_by_telephone(api_token, phone)
        
        if order_data is None or (isinstance(order_data, dict) and 'order' not in order_data):
            logging.warning(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω—É {phone} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–æ–Ω–æ –ø–æ—Ä–æ–∂–Ω—î")
            continue

        order = order_data.get('order')
        if order_data:
            logging.info(f"–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω—É {phone}")
            order_details = format_order_data(order_data)
            
            order_id = order['order_id']
            logging.info(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ {order_id} –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            
            order_date = order['date_added'].split(" ")[0]  # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É
            order_time = order['date_added'].split(" ")[1][:5]  # –ß–∞—Å –±–µ–∑ —Å–µ–∫—É–Ω–¥
            formatted_date = f"{order_date[8:10]}.{order_date[5:7]}.{order_date[0:4][2:]}"  # –§–æ—Ä–º–∞—Ç DD.MM.YY
            total_amount = float(order['total'])  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —É float –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
            formatted_total = f"{total_amount:.2f}".rstrip('0').rstrip('.')  # –§–æ—Ä–º–∞—Ç —ñ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω—É–ª—ñ–≤
            order_status = order['order_status'] if order['order_status'] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'
            city = order['payment_city']
            address = order['payment_address_1']

            products = [{'name': product['product_info']['name'],
                         'quantity': product['product_info']['quantity'],
                         'price': product['product_info']['price']}
                        for product in order['order_products']]

            previous_status = get_order_status(order_id)  
            if previous_status is None:
                save_order_to_db(phone, order_id, formatted_date, order_time, formatted_total, order_status, city, address, products)
                logging.info(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ {order_id} —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
                
                if order_status == "–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ":
                    await send_order_update_message(phone, order_id, order_status, formatted_total, order_date, order_time, city, address, products)
                    
                elif order_status == "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ":
                    save_order_to_db(phone, order_id, formatted_date, order_time, formatted_total, order_status, city, address, products)
            else:
                if previous_status != order_status and order_status == "–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ":
                    await send_order_update_message(phone, order_id, order_status, formatted_total, order_date, order_time, city, address, products)
                    logging.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ {order_id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ'. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
                    
                elif previous_status != order_status and order_status == "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ":
                    save_order_to_db(phone, order_id, formatted_date, order_time, formatted_total, order_status, city, address, products)
                    logging.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ {order_id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
                else:
                    logging.info(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ {order_id} –≤–∂–µ —ñ—Å–Ω—É—î. –°—Ç–∞—Ç—É—Å –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è.")


async def send_order_update_message(phone, order_id, order_status, formatted_total, order_date, order_time, city, address, products):
    # order_message = (
    #     f"<b>‚Ññ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {order_id}\n\n"  
    #     f"<b>–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {formatted_total} –≥—Ä–Ω\n\n"
    #     f"<b>–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {order_status}\n\n"
    #     f"<b>–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {order_time} ({order_date})\n\n"
    #     f"<b>–ú—ñ—Å—Ç–æ:</b> {city}\n\n"
    #     f"<b>–ê–¥—Ä–µ—Å–∞:</b> {address}\n\n"
    #     f"<b>–¢–æ–≤–∞—Ä–∏ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ:</b>\n\n"
    # )

    # for product in products:
    #     order_message += (
    #         f"- {product['name']} - {product['quantity']}—à—Ç {product['price']}–≥—Ä–Ω\n\n"
    #     )
        
    order_message = (f"–ü—Ä–∏–≤—ñ—Ç, –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –Ω–∞–π–±–ª–∏—â–∏–º —á–∞—Å–æ–º.ü§ç")
        
    user_id = get_user_id(phone)
        
    try:
        await bot.send_message(chat_id=user_id, text=order_message, parse_mode='HTML', reply_markup=send_menu())
        logging.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}")
    except Exception as e:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω {phone}: {e}")




async def send_mailing():
    tz = pytz.timezone('Europe/Kyiv')
    now = datetime.datetime.now(tz)

    current_date = now.strftime('%Y-%m-%d')  
    current_hour = now.strftime('%H')      
    current_minute_tens = now.minute  
    
    print(current_minute_tens)
    orders = fetch_posts_for_mailing(current_date, current_hour, current_minute_tens)

    if orders:
        
        for order in orders:
            phone = order[1]
            order_id = order[2]
            
            user_id = get_user_id(phone)
            print("trying")
            print(user_id)
            await bot.send_message(user_id, "–î—è–∫—É—î–º–æ, —â–æ –æ–±–∏—Ä–∞—î—Ç–µ Cosmy ‚ù§Ô∏è. \n\n –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤–æ—ó–º–∏ –≤—Ä–∞–∂–µ–Ω–Ω—è–º–∏ –ø—Ä–æ –ø–æ–∫—É–ø–∫—É, —Ü–µ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º —Å—Ç–∞—Ç–∏ —â–µ –∫—Ä–∞—â–µ !", reply_markup=send_order_review_menu())

    else:
        print("NO ORDERS")